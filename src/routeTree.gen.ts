/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as ClientDashboardRouteRouteImport } from './routes/client-dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as ClientDashboardIndexRouteImport } from './routes/client-dashboard/index'
import { Route as DashboardReportsRouteImport } from './routes/dashboard/reports'
import { Route as DashboardProductsRouteImport } from './routes/dashboard/products'
import { Route as DashboardOrdersRouteImport } from './routes/dashboard/orders'
import { Route as DashboardInventoryRouteImport } from './routes/dashboard/inventory'
import { Route as DashboardCustomersRouteImport } from './routes/dashboard/customers'
import { Route as AuthVerifyRouteImport } from './routes/auth.verify'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientDashboardRouteRoute = ClientDashboardRouteRouteImport.update({
  id: '/client-dashboard',
  path: '/client-dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const ClientDashboardIndexRoute = ClientDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ClientDashboardRouteRoute,
} as any)
const DashboardReportsRoute = DashboardReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardProductsRoute = DashboardProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardOrdersRoute = DashboardOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardInventoryRoute = DashboardInventoryRouteImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardCustomersRoute = DashboardCustomersRouteImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthVerifyRoute = AuthVerifyRouteImport.update({
  id: '/auth/verify',
  path: '/auth/verify',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/client-dashboard': typeof ClientDashboardRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/dashboard/customers': typeof DashboardCustomersRoute
  '/dashboard/inventory': typeof DashboardInventoryRoute
  '/dashboard/orders': typeof DashboardOrdersRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/client-dashboard/': typeof ClientDashboardIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/dashboard/customers': typeof DashboardCustomersRoute
  '/dashboard/inventory': typeof DashboardInventoryRoute
  '/dashboard/orders': typeof DashboardOrdersRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/client-dashboard': typeof ClientDashboardIndexRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/client-dashboard': typeof ClientDashboardRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/auth/verify': typeof AuthVerifyRoute
  '/dashboard/customers': typeof DashboardCustomersRoute
  '/dashboard/inventory': typeof DashboardInventoryRoute
  '/dashboard/orders': typeof DashboardOrdersRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/client-dashboard/': typeof ClientDashboardIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/client-dashboard'
    | '/dashboard'
    | '/login'
    | '/auth/verify'
    | '/dashboard/customers'
    | '/dashboard/inventory'
    | '/dashboard/orders'
    | '/dashboard/products'
    | '/dashboard/reports'
    | '/client-dashboard/'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/auth/verify'
    | '/dashboard/customers'
    | '/dashboard/inventory'
    | '/dashboard/orders'
    | '/dashboard/products'
    | '/dashboard/reports'
    | '/client-dashboard'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/client-dashboard'
    | '/dashboard'
    | '/login'
    | '/auth/verify'
    | '/dashboard/customers'
    | '/dashboard/inventory'
    | '/dashboard/orders'
    | '/dashboard/products'
    | '/dashboard/reports'
    | '/client-dashboard/'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientDashboardRouteRoute: typeof ClientDashboardRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  AuthVerifyRoute: typeof AuthVerifyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client-dashboard': {
      id: '/client-dashboard'
      path: '/client-dashboard'
      fullPath: '/client-dashboard'
      preLoaderRoute: typeof ClientDashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/client-dashboard/': {
      id: '/client-dashboard/'
      path: '/'
      fullPath: '/client-dashboard/'
      preLoaderRoute: typeof ClientDashboardIndexRouteImport
      parentRoute: typeof ClientDashboardRouteRoute
    }
    '/dashboard/reports': {
      id: '/dashboard/reports'
      path: '/reports'
      fullPath: '/dashboard/reports'
      preLoaderRoute: typeof DashboardReportsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/products': {
      id: '/dashboard/products'
      path: '/products'
      fullPath: '/dashboard/products'
      preLoaderRoute: typeof DashboardProductsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/orders': {
      id: '/dashboard/orders'
      path: '/orders'
      fullPath: '/dashboard/orders'
      preLoaderRoute: typeof DashboardOrdersRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/inventory': {
      id: '/dashboard/inventory'
      path: '/inventory'
      fullPath: '/dashboard/inventory'
      preLoaderRoute: typeof DashboardInventoryRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/customers': {
      id: '/dashboard/customers'
      path: '/customers'
      fullPath: '/dashboard/customers'
      preLoaderRoute: typeof DashboardCustomersRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/verify': {
      id: '/auth/verify'
      path: '/auth/verify'
      fullPath: '/auth/verify'
      preLoaderRoute: typeof AuthVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface ClientDashboardRouteRouteChildren {
  ClientDashboardIndexRoute: typeof ClientDashboardIndexRoute
}

const ClientDashboardRouteRouteChildren: ClientDashboardRouteRouteChildren = {
  ClientDashboardIndexRoute: ClientDashboardIndexRoute,
}

const ClientDashboardRouteRouteWithChildren =
  ClientDashboardRouteRoute._addFileChildren(ClientDashboardRouteRouteChildren)

interface DashboardRouteRouteChildren {
  DashboardCustomersRoute: typeof DashboardCustomersRoute
  DashboardInventoryRoute: typeof DashboardInventoryRoute
  DashboardOrdersRoute: typeof DashboardOrdersRoute
  DashboardProductsRoute: typeof DashboardProductsRoute
  DashboardReportsRoute: typeof DashboardReportsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardCustomersRoute: DashboardCustomersRoute,
  DashboardInventoryRoute: DashboardInventoryRoute,
  DashboardOrdersRoute: DashboardOrdersRoute,
  DashboardProductsRoute: DashboardProductsRoute,
  DashboardReportsRoute: DashboardReportsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientDashboardRouteRoute: ClientDashboardRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  AuthVerifyRoute: AuthVerifyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
